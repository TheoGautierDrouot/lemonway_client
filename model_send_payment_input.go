/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SendPaymentInput struct for SendPaymentInput
type SendPaymentInput struct {
	// Account ID to be Debited
	DebitAccountId string `json:"debitAccountId"`
	// Account ID to Credited
	CreditAccountId string `json:"creditAccountId"`
	// Payment Amount
	Amount *int32 `json:"amount,omitempty"`
	// Payment Comment
	Comment *string `json:"comment,omitempty"`
	// If scheduledDate is set, the following rules will apply:  1. ScheduledDate cannot be equal to the current date, Paris time (CET).  2. The payment will be inserted but not executed, the status will be pending and necessary checks like user balance or user status will not be checked.  3. At 1am, Paris time (CET), on [scheduledDate], the checks will be performed and the payment will be finalized.  **This feature is only available for some partners, contact commercial services for more information.**
	ScheduledDate *string `json:"scheduledDate,omitempty"`
	PrivateData *PrivateData `json:"privateData,omitempty"`
	// Origin Transaction Identification
	OriginTransactionId *int32 `json:"originTransactionId,omitempty"`
	Reference *string `json:"reference,omitempty"`
}

// NewSendPaymentInput instantiates a new SendPaymentInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendPaymentInput(debitAccountId string, creditAccountId string) *SendPaymentInput {
	this := SendPaymentInput{}
	this.DebitAccountId = debitAccountId
	this.CreditAccountId = creditAccountId
	return &this
}

// NewSendPaymentInputWithDefaults instantiates a new SendPaymentInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendPaymentInputWithDefaults() *SendPaymentInput {
	this := SendPaymentInput{}
	return &this
}

// GetDebitAccountId returns the DebitAccountId field value
func (o *SendPaymentInput) GetDebitAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DebitAccountId
}

// GetDebitAccountIdOk returns a tuple with the DebitAccountId field value
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetDebitAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DebitAccountId, true
}

// SetDebitAccountId sets field value
func (o *SendPaymentInput) SetDebitAccountId(v string) {
	o.DebitAccountId = v
}

// GetCreditAccountId returns the CreditAccountId field value
func (o *SendPaymentInput) GetCreditAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditAccountId
}

// GetCreditAccountIdOk returns a tuple with the CreditAccountId field value
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetCreditAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditAccountId, true
}

// SetCreditAccountId sets field value
func (o *SendPaymentInput) SetCreditAccountId(v string) {
	o.CreditAccountId = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *SendPaymentInput) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *SendPaymentInput) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *SendPaymentInput) SetAmount(v int32) {
	o.Amount = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *SendPaymentInput) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *SendPaymentInput) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *SendPaymentInput) SetComment(v string) {
	o.Comment = &v
}

// GetScheduledDate returns the ScheduledDate field value if set, zero value otherwise.
func (o *SendPaymentInput) GetScheduledDate() string {
	if o == nil || o.ScheduledDate == nil {
		var ret string
		return ret
	}
	return *o.ScheduledDate
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetScheduledDateOk() (*string, bool) {
	if o == nil || o.ScheduledDate == nil {
		return nil, false
	}
	return o.ScheduledDate, true
}

// HasScheduledDate returns a boolean if a field has been set.
func (o *SendPaymentInput) HasScheduledDate() bool {
	if o != nil && o.ScheduledDate != nil {
		return true
	}

	return false
}

// SetScheduledDate gets a reference to the given string and assigns it to the ScheduledDate field.
func (o *SendPaymentInput) SetScheduledDate(v string) {
	o.ScheduledDate = &v
}

// GetPrivateData returns the PrivateData field value if set, zero value otherwise.
func (o *SendPaymentInput) GetPrivateData() PrivateData {
	if o == nil || o.PrivateData == nil {
		var ret PrivateData
		return ret
	}
	return *o.PrivateData
}

// GetPrivateDataOk returns a tuple with the PrivateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetPrivateDataOk() (*PrivateData, bool) {
	if o == nil || o.PrivateData == nil {
		return nil, false
	}
	return o.PrivateData, true
}

// HasPrivateData returns a boolean if a field has been set.
func (o *SendPaymentInput) HasPrivateData() bool {
	if o != nil && o.PrivateData != nil {
		return true
	}

	return false
}

// SetPrivateData gets a reference to the given PrivateData and assigns it to the PrivateData field.
func (o *SendPaymentInput) SetPrivateData(v PrivateData) {
	o.PrivateData = &v
}

// GetOriginTransactionId returns the OriginTransactionId field value if set, zero value otherwise.
func (o *SendPaymentInput) GetOriginTransactionId() int32 {
	if o == nil || o.OriginTransactionId == nil {
		var ret int32
		return ret
	}
	return *o.OriginTransactionId
}

// GetOriginTransactionIdOk returns a tuple with the OriginTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetOriginTransactionIdOk() (*int32, bool) {
	if o == nil || o.OriginTransactionId == nil {
		return nil, false
	}
	return o.OriginTransactionId, true
}

// HasOriginTransactionId returns a boolean if a field has been set.
func (o *SendPaymentInput) HasOriginTransactionId() bool {
	if o != nil && o.OriginTransactionId != nil {
		return true
	}

	return false
}

// SetOriginTransactionId gets a reference to the given int32 and assigns it to the OriginTransactionId field.
func (o *SendPaymentInput) SetOriginTransactionId(v int32) {
	o.OriginTransactionId = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *SendPaymentInput) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendPaymentInput) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *SendPaymentInput) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *SendPaymentInput) SetReference(v string) {
	o.Reference = &v
}

func (o SendPaymentInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["debitAccountId"] = o.DebitAccountId
	}
	if true {
		toSerialize["creditAccountId"] = o.CreditAccountId
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.ScheduledDate != nil {
		toSerialize["scheduledDate"] = o.ScheduledDate
	}
	if o.PrivateData != nil {
		toSerialize["privateData"] = o.PrivateData
	}
	if o.OriginTransactionId != nil {
		toSerialize["originTransactionId"] = o.OriginTransactionId
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	return json.Marshal(toSerialize)
}

type NullableSendPaymentInput struct {
	value *SendPaymentInput
	isSet bool
}

func (v NullableSendPaymentInput) Get() *SendPaymentInput {
	return v.value
}

func (v *NullableSendPaymentInput) Set(val *SendPaymentInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSendPaymentInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSendPaymentInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendPaymentInput(val *SendPaymentInput) *NullableSendPaymentInput {
	return &NullableSendPaymentInput{value: val, isSet: true}
}

func (v NullableSendPaymentInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendPaymentInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


