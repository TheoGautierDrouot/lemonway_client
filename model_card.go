/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Card struct for Card
type Card struct {
	// 
	Id *int64 `json:"id,omitempty"`
	// Card with 3-DS authentication
	Is3DS *bool `json:"is3DS,omitempty"`
	// Card issuing country
	Country *string `json:"country,omitempty"`
	// Authorization number
	AuthorizationNumber *string `json:"authorizationNumber,omitempty"`
	// Masked card number
	MaskedNumber *string `json:"maskedNumber,omitempty"`
	// Expiration date (if available)
	Expiration *string `json:"expiration,omitempty"`
	// Card type (example: Visa or Mastercard)
	Type *string `json:"type,omitempty"`
	// Card is registered
	IsRegistered *bool `json:"isRegistered,omitempty"`
	// Card's holder name
	HolderName *string `json:"holderName,omitempty"`
}

// NewCard instantiates a new Card object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCard() *Card {
	this := Card{}
	return &this
}

// NewCardWithDefaults instantiates a new Card object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardWithDefaults() *Card {
	this := Card{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Card) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Card) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Card) SetId(v int64) {
	o.Id = &v
}

// GetIs3DS returns the Is3DS field value if set, zero value otherwise.
func (o *Card) GetIs3DS() bool {
	if o == nil || o.Is3DS == nil {
		var ret bool
		return ret
	}
	return *o.Is3DS
}

// GetIs3DSOk returns a tuple with the Is3DS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetIs3DSOk() (*bool, bool) {
	if o == nil || o.Is3DS == nil {
		return nil, false
	}
	return o.Is3DS, true
}

// HasIs3DS returns a boolean if a field has been set.
func (o *Card) HasIs3DS() bool {
	if o != nil && o.Is3DS != nil {
		return true
	}

	return false
}

// SetIs3DS gets a reference to the given bool and assigns it to the Is3DS field.
func (o *Card) SetIs3DS(v bool) {
	o.Is3DS = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Card) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Card) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Card) SetCountry(v string) {
	o.Country = &v
}

// GetAuthorizationNumber returns the AuthorizationNumber field value if set, zero value otherwise.
func (o *Card) GetAuthorizationNumber() string {
	if o == nil || o.AuthorizationNumber == nil {
		var ret string
		return ret
	}
	return *o.AuthorizationNumber
}

// GetAuthorizationNumberOk returns a tuple with the AuthorizationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetAuthorizationNumberOk() (*string, bool) {
	if o == nil || o.AuthorizationNumber == nil {
		return nil, false
	}
	return o.AuthorizationNumber, true
}

// HasAuthorizationNumber returns a boolean if a field has been set.
func (o *Card) HasAuthorizationNumber() bool {
	if o != nil && o.AuthorizationNumber != nil {
		return true
	}

	return false
}

// SetAuthorizationNumber gets a reference to the given string and assigns it to the AuthorizationNumber field.
func (o *Card) SetAuthorizationNumber(v string) {
	o.AuthorizationNumber = &v
}

// GetMaskedNumber returns the MaskedNumber field value if set, zero value otherwise.
func (o *Card) GetMaskedNumber() string {
	if o == nil || o.MaskedNumber == nil {
		var ret string
		return ret
	}
	return *o.MaskedNumber
}

// GetMaskedNumberOk returns a tuple with the MaskedNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetMaskedNumberOk() (*string, bool) {
	if o == nil || o.MaskedNumber == nil {
		return nil, false
	}
	return o.MaskedNumber, true
}

// HasMaskedNumber returns a boolean if a field has been set.
func (o *Card) HasMaskedNumber() bool {
	if o != nil && o.MaskedNumber != nil {
		return true
	}

	return false
}

// SetMaskedNumber gets a reference to the given string and assigns it to the MaskedNumber field.
func (o *Card) SetMaskedNumber(v string) {
	o.MaskedNumber = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *Card) GetExpiration() string {
	if o == nil || o.Expiration == nil {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetExpirationOk() (*string, bool) {
	if o == nil || o.Expiration == nil {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *Card) HasExpiration() bool {
	if o != nil && o.Expiration != nil {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *Card) SetExpiration(v string) {
	o.Expiration = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Card) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Card) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Card) SetType(v string) {
	o.Type = &v
}

// GetIsRegistered returns the IsRegistered field value if set, zero value otherwise.
func (o *Card) GetIsRegistered() bool {
	if o == nil || o.IsRegistered == nil {
		var ret bool
		return ret
	}
	return *o.IsRegistered
}

// GetIsRegisteredOk returns a tuple with the IsRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetIsRegisteredOk() (*bool, bool) {
	if o == nil || o.IsRegistered == nil {
		return nil, false
	}
	return o.IsRegistered, true
}

// HasIsRegistered returns a boolean if a field has been set.
func (o *Card) HasIsRegistered() bool {
	if o != nil && o.IsRegistered != nil {
		return true
	}

	return false
}

// SetIsRegistered gets a reference to the given bool and assigns it to the IsRegistered field.
func (o *Card) SetIsRegistered(v bool) {
	o.IsRegistered = &v
}

// GetHolderName returns the HolderName field value if set, zero value otherwise.
func (o *Card) GetHolderName() string {
	if o == nil || o.HolderName == nil {
		var ret string
		return ret
	}
	return *o.HolderName
}

// GetHolderNameOk returns a tuple with the HolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetHolderNameOk() (*string, bool) {
	if o == nil || o.HolderName == nil {
		return nil, false
	}
	return o.HolderName, true
}

// HasHolderName returns a boolean if a field has been set.
func (o *Card) HasHolderName() bool {
	if o != nil && o.HolderName != nil {
		return true
	}

	return false
}

// SetHolderName gets a reference to the given string and assigns it to the HolderName field.
func (o *Card) SetHolderName(v string) {
	o.HolderName = &v
}

func (o Card) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Is3DS != nil {
		toSerialize["is3DS"] = o.Is3DS
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.AuthorizationNumber != nil {
		toSerialize["authorizationNumber"] = o.AuthorizationNumber
	}
	if o.MaskedNumber != nil {
		toSerialize["maskedNumber"] = o.MaskedNumber
	}
	if o.Expiration != nil {
		toSerialize["expiration"] = o.Expiration
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.IsRegistered != nil {
		toSerialize["isRegistered"] = o.IsRegistered
	}
	if o.HolderName != nil {
		toSerialize["holderName"] = o.HolderName
	}
	return json.Marshal(toSerialize)
}

type NullableCard struct {
	value *Card
	isSet bool
}

func (v NullableCard) Get() *Card {
	return v.value
}

func (v *NullableCard) Set(val *Card) {
	v.value = val
	v.isSet = true
}

func (v NullableCard) IsSet() bool {
	return v.isSet
}

func (v *NullableCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCard(val *Card) *NullableCard {
	return &NullableCard{value: val, isSet: true}
}

func (v NullableCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


