/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Transaction Transcation
type Transaction struct {
	// Reference
	Reference string `json:"reference"`
	// Account Id
	AccountId string `json:"accountId"`
	// Total Amount
	TotalAmount int32 `json:"totalAmount"`
	// Commission Amount
	CommissionAmount int32 `json:"commissionAmount"`
	// Comment
	Comment *string `json:"comment,omitempty"`
	// Auto Commission
	AutoCommission *bool `json:"autoCommission,omitempty"`
	IsPreAuth *bool `json:"isPreAuth,omitempty"`
	// Specifies the capture mode for the payment:  Automatic results in a Capture type, and Manual results in an Authorize type.<br/>1 = Automatic.<br/>2 = Manual.<br/>
	CaptureMode *int32 `json:"captureMode,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(reference string, accountId string, totalAmount int32, commissionAmount int32) *Transaction {
	this := Transaction{}
	this.Reference = reference
	this.AccountId = accountId
	this.TotalAmount = totalAmount
	this.CommissionAmount = commissionAmount
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetReference returns the Reference field value
func (o *Transaction) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetReferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *Transaction) SetReference(v string) {
	o.Reference = v
}

// GetAccountId returns the AccountId field value
func (o *Transaction) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Transaction) SetAccountId(v string) {
	o.AccountId = v
}

// GetTotalAmount returns the TotalAmount field value
func (o *Transaction) GetTotalAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetTotalAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalAmount, true
}

// SetTotalAmount sets field value
func (o *Transaction) SetTotalAmount(v int32) {
	o.TotalAmount = v
}

// GetCommissionAmount returns the CommissionAmount field value
func (o *Transaction) GetCommissionAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetCommissionAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommissionAmount, true
}

// SetCommissionAmount sets field value
func (o *Transaction) SetCommissionAmount(v int32) {
	o.CommissionAmount = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Transaction) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Transaction) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Transaction) SetComment(v string) {
	o.Comment = &v
}

// GetAutoCommission returns the AutoCommission field value if set, zero value otherwise.
func (o *Transaction) GetAutoCommission() bool {
	if o == nil || o.AutoCommission == nil {
		var ret bool
		return ret
	}
	return *o.AutoCommission
}

// GetAutoCommissionOk returns a tuple with the AutoCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAutoCommissionOk() (*bool, bool) {
	if o == nil || o.AutoCommission == nil {
		return nil, false
	}
	return o.AutoCommission, true
}

// HasAutoCommission returns a boolean if a field has been set.
func (o *Transaction) HasAutoCommission() bool {
	if o != nil && o.AutoCommission != nil {
		return true
	}

	return false
}

// SetAutoCommission gets a reference to the given bool and assigns it to the AutoCommission field.
func (o *Transaction) SetAutoCommission(v bool) {
	o.AutoCommission = &v
}

// GetIsPreAuth returns the IsPreAuth field value if set, zero value otherwise.
func (o *Transaction) GetIsPreAuth() bool {
	if o == nil || o.IsPreAuth == nil {
		var ret bool
		return ret
	}
	return *o.IsPreAuth
}

// GetIsPreAuthOk returns a tuple with the IsPreAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIsPreAuthOk() (*bool, bool) {
	if o == nil || o.IsPreAuth == nil {
		return nil, false
	}
	return o.IsPreAuth, true
}

// HasIsPreAuth returns a boolean if a field has been set.
func (o *Transaction) HasIsPreAuth() bool {
	if o != nil && o.IsPreAuth != nil {
		return true
	}

	return false
}

// SetIsPreAuth gets a reference to the given bool and assigns it to the IsPreAuth field.
func (o *Transaction) SetIsPreAuth(v bool) {
	o.IsPreAuth = &v
}

// GetCaptureMode returns the CaptureMode field value if set, zero value otherwise.
func (o *Transaction) GetCaptureMode() int32 {
	if o == nil || o.CaptureMode == nil {
		var ret int32
		return ret
	}
	return *o.CaptureMode
}

// GetCaptureModeOk returns a tuple with the CaptureMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCaptureModeOk() (*int32, bool) {
	if o == nil || o.CaptureMode == nil {
		return nil, false
	}
	return o.CaptureMode, true
}

// HasCaptureMode returns a boolean if a field has been set.
func (o *Transaction) HasCaptureMode() bool {
	if o != nil && o.CaptureMode != nil {
		return true
	}

	return false
}

// SetCaptureMode gets a reference to the given int32 and assigns it to the CaptureMode field.
func (o *Transaction) SetCaptureMode(v int32) {
	o.CaptureMode = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if true {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if true {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.AutoCommission != nil {
		toSerialize["autoCommission"] = o.AutoCommission
	}
	if o.IsPreAuth != nil {
		toSerialize["isPreAuth"] = o.IsPreAuth
	}
	if o.CaptureMode != nil {
		toSerialize["captureMode"] = o.CaptureMode
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


