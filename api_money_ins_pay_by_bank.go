/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// MoneyInsPayByBankApiService MoneyInsPayByBankApi service
type MoneyInsPayByBankApiService service

type ApiMoneyInsGetMoneyInBanksRequest struct {
	ctx context.Context
	ApiService *MoneyInsPayByBankApiService
	authorization *string
	pSUIPAddress *string
	countryCodes *string
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsGetMoneyInBanksRequest) Authorization(authorization string) ApiMoneyInsGetMoneyInBanksRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsGetMoneyInBanksRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsGetMoneyInBanksRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

// Comma separated string of ISO Alpha-2 country codes.  Available country codes include:    - France (FR)     - Spain (ES)     - Italy (IT)     - Germany (DE)     - Portugal (PT)
func (r ApiMoneyInsGetMoneyInBanksRequest) CountryCodes(countryCodes string) ApiMoneyInsGetMoneyInBanksRequest {
	r.countryCodes = &countryCodes
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsGetMoneyInBanksRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsGetMoneyInBanksRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsGetMoneyInBanksRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsGetMoneyInBanksRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsGetMoneyInBanksRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsGetMoneyInBanksRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsGetMoneyInBanksRequest) AuthorizationBasicFromProvider() ApiMoneyInsGetMoneyInBanksRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsGetMoneyInBanksRequest) AuthorizationBearerFromProvider() ApiMoneyInsGetMoneyInBanksRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsGetMoneyInBanksRequest) Execute() (*GetMoneyInBanksOutput, *http.Response, error) {
	return r.ApiService.MoneyInsGetMoneyInBanksExecute(r)
}

/*
MoneyInsGetMoneyInBanks Get Pay by Bank List

Returns the list of supported Banks to make Pay By Bank transfers. This method enables you to design, customize and host a bank selection site, or alternatively a bank's bankid can be retrieved from the bank list.
id can then be used to send your end-user directly to their bank website. <br /><br /><b>How does it work?</b><br />

1. Call the method GET /v2/moneyins/paybybank/transfer/banks. Ensure that you use the bank's country code in the Query Parameters to retrieve a list of banks. <br /><p></p><b>Note:</b> If you want a comprehensive list of all supported banks do not specify a country code. <br /><b>Note:</b> Currently there is not a way to search for a specific bank in a country. Therefore when you create the query FR for example, a list of French banks is displayed in the response. You will be then required to identify the end-user's bank. <br /><p></p>
2. If you have your end-user's bankId, and would like to direct them their bank each time they select Pay by Bank on your website: <br /><ul><li>Use the method POST v2/moneyins/paybybank/transfer/init using the bankId in the request body. You can then use the redirectURL and id (from the response) to send the end-user directly to their bank without them ever using a bank selection process.</li></ul>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMoneyInsGetMoneyInBanksRequest
*/
func (a *MoneyInsPayByBankApiService) MoneyInsGetMoneyInBanks(ctx context.Context) ApiMoneyInsGetMoneyInBanksRequest {
	return ApiMoneyInsGetMoneyInBanksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetMoneyInBanksOutput
func (a *MoneyInsPayByBankApiService) MoneyInsGetMoneyInBanksExecute(r ApiMoneyInsGetMoneyInBanksRequest) (*GetMoneyInBanksOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMoneyInBanksOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsPayByBankApiService.MoneyInsGetMoneyInBanks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/paybybank/transfer/banks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}

	if r.countryCodes != nil {
		localVarQueryParams.Add("countryCodes", parameterToString(*r.countryCodes, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoneyInsMoneyInTransferInitRequest struct {
	ctx context.Context
	ApiService *MoneyInsPayByBankApiService
	authorization *string
	pSUIPAddress *string
	rawInput *MoneyInTransferInitInput
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsMoneyInTransferInitRequest) Authorization(authorization string) ApiMoneyInsMoneyInTransferInitRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsMoneyInTransferInitRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsMoneyInTransferInitRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

func (r ApiMoneyInsMoneyInTransferInitRequest) RawInput(rawInput MoneyInTransferInitInput) ApiMoneyInsMoneyInTransferInitRequest {
	r.rawInput = &rawInput
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsMoneyInTransferInitRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsMoneyInTransferInitRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsMoneyInTransferInitRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsMoneyInTransferInitRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsMoneyInTransferInitRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsMoneyInTransferInitRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsMoneyInTransferInitRequest) AuthorizationBasicFromProvider() ApiMoneyInsMoneyInTransferInitRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsMoneyInTransferInitRequest) AuthorizationBearerFromProvider() ApiMoneyInsMoneyInTransferInitRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsMoneyInTransferInitRequest) Execute() (*MoneyInTransferInitOutput, *http.Response, error) {
	return r.ApiService.MoneyInsMoneyInTransferInitExecute(r)
}

/*
MoneyInsMoneyInTransferInit Initiate Pay by Bank

<b>How does it work?</b>
<br />
<p></p>
            1. Call POST v2/moneyins/paybybank/transfer/init, to receive a redirect URL and the transaction Id. <br /><p></p>
            2. Redirect the end-user to your bank selection page, were they can select their bank from the displayed list. <br /><p></p><b>Note:</b> If you specify the bankId in the request body, the end-user will be directed to their bank. <br />
            For further information on how to obtain bankIds, see: /v2/moneyins/ paybybank/transfer/banks 
            3. Once the end-user selects their bank they are redirected to the bank webpage to enter their credentials.
            <p></p><b>Note:</b> If you have previously specified the bankId the end-user only needs to enter their bank credentials at this stage. <br /><p></p>
            4. After successfully entering their credentials, the end-user will go through Strong Customer Authentication (SCA) to confirm their identity (SCA examples include: face recognition or mobile Bank App software). Some bank ask to SCA before entering credentials.<br /><p></p>
            5. Once successfully authenticated the end-user only needs to verify and validate the amount, comments and so forth on the bank website.
            <p></p>
            6. After submitting the payment, the end-user will be redirected to:
             <ul><li>returnUrl in case of success</li><li>cancelUrl in case of cancellation</li><li>errorUrl in case of error.</li></ul>
            These 3 URLs must be publicly accessible for the end-user. It must also be accessible to our WebKit server to send requests to the end-user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMoneyInsMoneyInTransferInitRequest
*/
func (a *MoneyInsPayByBankApiService) MoneyInsMoneyInTransferInit(ctx context.Context) ApiMoneyInsMoneyInTransferInitRequest {
	return ApiMoneyInsMoneyInTransferInitRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MoneyInTransferInitOutput
func (a *MoneyInsPayByBankApiService) MoneyInsMoneyInTransferInitExecute(r ApiMoneyInsMoneyInTransferInitRequest) (*MoneyInTransferInitOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoneyInTransferInitOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsPayByBankApiService.MoneyInsMoneyInTransferInit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/paybybank/transfer/init"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}
	if r.rawInput == nil {
        value, ok := localAdditionalValues["rawInput"].(MoneyInTransferInitInput)
        if !ok {
            return localVarReturnValue, nil, reportError("rawInput is required and must be specified")
        }
        r.rawInput = &value
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	// body params
	localVarPostBody = r.rawInput
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
