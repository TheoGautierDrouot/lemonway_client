/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MoneyInsPayPalApiService MoneyInsPayPalApi service
type MoneyInsPayPalApiService service

type ApiMoneyInsMoneyInPayPalInitRequest struct {
	ctx context.Context
	ApiService *MoneyInsPayPalApiService
	authorization *string
	pSUIPAddress *string
	input *InitPayPalTransactionInput
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsMoneyInPayPalInitRequest) Authorization(authorization string) ApiMoneyInsMoneyInPayPalInitRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsMoneyInPayPalInitRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsMoneyInPayPalInitRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

func (r ApiMoneyInsMoneyInPayPalInitRequest) Input(input InitPayPalTransactionInput) ApiMoneyInsMoneyInPayPalInitRequest {
	r.input = &input
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsMoneyInPayPalInitRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsMoneyInPayPalInitRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsMoneyInPayPalInitRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsMoneyInPayPalInitRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsMoneyInPayPalInitRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsMoneyInPayPalInitRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsMoneyInPayPalInitRequest) AuthorizationBasicFromProvider() ApiMoneyInsMoneyInPayPalInitRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsMoneyInPayPalInitRequest) AuthorizationBearerFromProvider() ApiMoneyInsMoneyInPayPalInitRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsMoneyInPayPalInitRequest) Execute() (*InitPayPalTransactionOutput, *http.Response, error) {
	return r.ApiService.MoneyInsMoneyInPayPalInitExecute(r)
}

/*
MoneyInsMoneyInPayPalInit Initiate Pay by PayPal

Lets you integrate PayPal payments on your platform. The integration is implemented as a standard web page redirect to PayPal.com, it enables buyers to login to their accounts and make a payment to your organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMoneyInsMoneyInPayPalInitRequest
*/
func (a *MoneyInsPayPalApiService) MoneyInsMoneyInPayPalInit(ctx context.Context) ApiMoneyInsMoneyInPayPalInitRequest {
	return ApiMoneyInsMoneyInPayPalInitRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InitPayPalTransactionOutput
func (a *MoneyInsPayPalApiService) MoneyInsMoneyInPayPalInitExecute(r ApiMoneyInsMoneyInPayPalInitRequest) (*InitPayPalTransactionOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InitPayPalTransactionOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsPayPalApiService.MoneyInsMoneyInPayPalInit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/paypal/init"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}
	if r.input == nil {
        value, ok := localAdditionalValues["input"].(InitPayPalTransactionInput)
        if !ok {
            return localVarReturnValue, nil, reportError("input is required and must be specified")
        }
        r.input = &value
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	// body params
	localVarPostBody = r.input
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoneyInsPayPalTransactionResumeRequest struct {
	ctx context.Context
	ApiService *MoneyInsPayPalApiService
	transactionId int64
	authorization *string
	pSUIPAddress *string
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsPayPalTransactionResumeRequest) Authorization(authorization string) ApiMoneyInsPayPalTransactionResumeRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsPayPalTransactionResumeRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsPayPalTransactionResumeRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsPayPalTransactionResumeRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsPayPalTransactionResumeRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsPayPalTransactionResumeRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsPayPalTransactionResumeRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsPayPalTransactionResumeRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsPayPalTransactionResumeRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsPayPalTransactionResumeRequest) AuthorizationBasicFromProvider() ApiMoneyInsPayPalTransactionResumeRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsPayPalTransactionResumeRequest) AuthorizationBearerFromProvider() ApiMoneyInsPayPalTransactionResumeRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsPayPalTransactionResumeRequest) Execute() (*MoneyInOutput, *http.Response, error) {
	return r.ApiService.MoneyInsPayPalTransactionResumeExecute(r)
}

/*
MoneyInsPayPalTransactionResume PayPal Resume

PayPal's SDK Integration method lets you customize your offering. It enables you to define content based on the data that passed. There are a number of parameters that can be defined,  
for example, buyer currency, buttons, messages and hosted fields.  

Use this API to integrate PayPal Javascript SDK, in addition you must use [Initiate a PayPal Payment](https://documentation.lemonway.com/reference/moneyins_paypaltransactioninit) to fully integrate.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionId
 @return ApiMoneyInsPayPalTransactionResumeRequest
*/
func (a *MoneyInsPayPalApiService) MoneyInsPayPalTransactionResume(ctx context.Context, transactionId int64) ApiMoneyInsPayPalTransactionResumeRequest {
	return ApiMoneyInsPayPalTransactionResumeRequest{
		ApiService: a,
		ctx: ctx,
		transactionId: transactionId,
	}
}

// Execute executes the request
//  @return MoneyInOutput
func (a *MoneyInsPayPalApiService) MoneyInsPayPalTransactionResumeExecute(r ApiMoneyInsPayPalTransactionResumeRequest) (*MoneyInOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoneyInOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsPayPalApiService.MoneyInsPayPalTransactionResume")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/paypal/{transactionId}/resume"
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", url.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
