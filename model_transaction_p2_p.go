/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionP2P struct for TransactionP2P
type TransactionP2P struct {
	// Debited Account
	SenderAccountId *string `json:"senderAccountId,omitempty"`
	// Credited Account
	ReceiverAccountId *string `json:"receiverAccountId,omitempty"`
	// Debited Amount  Amounts are represented in cents (Euro)
	DebitAmount *int32 `json:"debitAmount,omitempty"`
	// Credited Amount  Amounts are represented in cents (Euro)
	CreditAmount *int32 `json:"creditAmount,omitempty"`
	PrivateData *PrivateData `json:"privateData,omitempty"`
	// Request date for a payment or payment date. UTC unix timestamp
	ScheduledDate *string `json:"scheduledDate,omitempty"`
	// Returned 1 for a P2P commission transaction
	IsFee *bool `json:"isFee,omitempty"`
	// Original transaction ID
	FeeReference *int32 `json:"feeReference,omitempty"`
	// Transaction ID
	Id *int64 `json:"id,omitempty"`
	// Payment Method    0 Card      1 Bank transfer (MoneyIn)       3 Bank transfer (MoneyOut)       4 P2P      13 iDEAL      14 SEPA DirectDebit      15 Cheque      19 Multibanco      21 MBWAY      30 BNPL    35 PayPal     ---   **Important:** The following services have been discontinued.      16 Neosurf    17 Sofort    18 PFS Physical Card    20 Payshop    22 Polish Instant Transfer    23 Pagare    24 MobilePay  25 Paytrail  26 WeChat    27 P24    28 MoneyIn by TPE    29 Trustly
	Method *int32 `json:"method,omitempty"`
	// Payment Method Details  0 Standard  1 Pay By Bank<br/>0 = STANDARD.<br/>1 = PAY_BY_BANK.<br/>
	MethodDetails *int32 `json:"methodDetails,omitempty"`
	// Transaction initialization date, UTC Unix timestamp
	Date *int32 `json:"date,omitempty"`
	// Your fee  Amounts are given as integer numbers in cents
	CommissionAmount *int32 `json:"commissionAmount,omitempty"`
	// Comment
	Comment *string `json:"comment,omitempty"`
	// **Money-In**         0: Success    3: Lemonway Error    4: Pending    6: PSP error    7: Cancelled    16: Validation pending      **Money-Out**      **Important:**  For /v2/moneyins/{transactionid}/validate` use the status codes:      0: Waiting for finalization      3: Success      4: Lemonway Error                    **P2P**    0: Pending    3: Success
	Status *int32 `json:"status,omitempty"`
	// Transaction execution date
	ExecutionDate *int32 `json:"executionDate,omitempty"`
	LemonWayCommission *LemonWayCommission `json:"lemonWayCommission,omitempty"`
	// Unique ID generated by your server
	Reference *string `json:"reference,omitempty"`
}

// NewTransactionP2P instantiates a new TransactionP2P object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionP2P() *TransactionP2P {
	this := TransactionP2P{}
	return &this
}

// NewTransactionP2PWithDefaults instantiates a new TransactionP2P object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionP2PWithDefaults() *TransactionP2P {
	this := TransactionP2P{}
	return &this
}

// GetSenderAccountId returns the SenderAccountId field value if set, zero value otherwise.
func (o *TransactionP2P) GetSenderAccountId() string {
	if o == nil || o.SenderAccountId == nil {
		var ret string
		return ret
	}
	return *o.SenderAccountId
}

// GetSenderAccountIdOk returns a tuple with the SenderAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetSenderAccountIdOk() (*string, bool) {
	if o == nil || o.SenderAccountId == nil {
		return nil, false
	}
	return o.SenderAccountId, true
}

// HasSenderAccountId returns a boolean if a field has been set.
func (o *TransactionP2P) HasSenderAccountId() bool {
	if o != nil && o.SenderAccountId != nil {
		return true
	}

	return false
}

// SetSenderAccountId gets a reference to the given string and assigns it to the SenderAccountId field.
func (o *TransactionP2P) SetSenderAccountId(v string) {
	o.SenderAccountId = &v
}

// GetReceiverAccountId returns the ReceiverAccountId field value if set, zero value otherwise.
func (o *TransactionP2P) GetReceiverAccountId() string {
	if o == nil || o.ReceiverAccountId == nil {
		var ret string
		return ret
	}
	return *o.ReceiverAccountId
}

// GetReceiverAccountIdOk returns a tuple with the ReceiverAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetReceiverAccountIdOk() (*string, bool) {
	if o == nil || o.ReceiverAccountId == nil {
		return nil, false
	}
	return o.ReceiverAccountId, true
}

// HasReceiverAccountId returns a boolean if a field has been set.
func (o *TransactionP2P) HasReceiverAccountId() bool {
	if o != nil && o.ReceiverAccountId != nil {
		return true
	}

	return false
}

// SetReceiverAccountId gets a reference to the given string and assigns it to the ReceiverAccountId field.
func (o *TransactionP2P) SetReceiverAccountId(v string) {
	o.ReceiverAccountId = &v
}

// GetDebitAmount returns the DebitAmount field value if set, zero value otherwise.
func (o *TransactionP2P) GetDebitAmount() int32 {
	if o == nil || o.DebitAmount == nil {
		var ret int32
		return ret
	}
	return *o.DebitAmount
}

// GetDebitAmountOk returns a tuple with the DebitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetDebitAmountOk() (*int32, bool) {
	if o == nil || o.DebitAmount == nil {
		return nil, false
	}
	return o.DebitAmount, true
}

// HasDebitAmount returns a boolean if a field has been set.
func (o *TransactionP2P) HasDebitAmount() bool {
	if o != nil && o.DebitAmount != nil {
		return true
	}

	return false
}

// SetDebitAmount gets a reference to the given int32 and assigns it to the DebitAmount field.
func (o *TransactionP2P) SetDebitAmount(v int32) {
	o.DebitAmount = &v
}

// GetCreditAmount returns the CreditAmount field value if set, zero value otherwise.
func (o *TransactionP2P) GetCreditAmount() int32 {
	if o == nil || o.CreditAmount == nil {
		var ret int32
		return ret
	}
	return *o.CreditAmount
}

// GetCreditAmountOk returns a tuple with the CreditAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetCreditAmountOk() (*int32, bool) {
	if o == nil || o.CreditAmount == nil {
		return nil, false
	}
	return o.CreditAmount, true
}

// HasCreditAmount returns a boolean if a field has been set.
func (o *TransactionP2P) HasCreditAmount() bool {
	if o != nil && o.CreditAmount != nil {
		return true
	}

	return false
}

// SetCreditAmount gets a reference to the given int32 and assigns it to the CreditAmount field.
func (o *TransactionP2P) SetCreditAmount(v int32) {
	o.CreditAmount = &v
}

// GetPrivateData returns the PrivateData field value if set, zero value otherwise.
func (o *TransactionP2P) GetPrivateData() PrivateData {
	if o == nil || o.PrivateData == nil {
		var ret PrivateData
		return ret
	}
	return *o.PrivateData
}

// GetPrivateDataOk returns a tuple with the PrivateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetPrivateDataOk() (*PrivateData, bool) {
	if o == nil || o.PrivateData == nil {
		return nil, false
	}
	return o.PrivateData, true
}

// HasPrivateData returns a boolean if a field has been set.
func (o *TransactionP2P) HasPrivateData() bool {
	if o != nil && o.PrivateData != nil {
		return true
	}

	return false
}

// SetPrivateData gets a reference to the given PrivateData and assigns it to the PrivateData field.
func (o *TransactionP2P) SetPrivateData(v PrivateData) {
	o.PrivateData = &v
}

// GetScheduledDate returns the ScheduledDate field value if set, zero value otherwise.
func (o *TransactionP2P) GetScheduledDate() string {
	if o == nil || o.ScheduledDate == nil {
		var ret string
		return ret
	}
	return *o.ScheduledDate
}

// GetScheduledDateOk returns a tuple with the ScheduledDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetScheduledDateOk() (*string, bool) {
	if o == nil || o.ScheduledDate == nil {
		return nil, false
	}
	return o.ScheduledDate, true
}

// HasScheduledDate returns a boolean if a field has been set.
func (o *TransactionP2P) HasScheduledDate() bool {
	if o != nil && o.ScheduledDate != nil {
		return true
	}

	return false
}

// SetScheduledDate gets a reference to the given string and assigns it to the ScheduledDate field.
func (o *TransactionP2P) SetScheduledDate(v string) {
	o.ScheduledDate = &v
}

// GetIsFee returns the IsFee field value if set, zero value otherwise.
func (o *TransactionP2P) GetIsFee() bool {
	if o == nil || o.IsFee == nil {
		var ret bool
		return ret
	}
	return *o.IsFee
}

// GetIsFeeOk returns a tuple with the IsFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetIsFeeOk() (*bool, bool) {
	if o == nil || o.IsFee == nil {
		return nil, false
	}
	return o.IsFee, true
}

// HasIsFee returns a boolean if a field has been set.
func (o *TransactionP2P) HasIsFee() bool {
	if o != nil && o.IsFee != nil {
		return true
	}

	return false
}

// SetIsFee gets a reference to the given bool and assigns it to the IsFee field.
func (o *TransactionP2P) SetIsFee(v bool) {
	o.IsFee = &v
}

// GetFeeReference returns the FeeReference field value if set, zero value otherwise.
func (o *TransactionP2P) GetFeeReference() int32 {
	if o == nil || o.FeeReference == nil {
		var ret int32
		return ret
	}
	return *o.FeeReference
}

// GetFeeReferenceOk returns a tuple with the FeeReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetFeeReferenceOk() (*int32, bool) {
	if o == nil || o.FeeReference == nil {
		return nil, false
	}
	return o.FeeReference, true
}

// HasFeeReference returns a boolean if a field has been set.
func (o *TransactionP2P) HasFeeReference() bool {
	if o != nil && o.FeeReference != nil {
		return true
	}

	return false
}

// SetFeeReference gets a reference to the given int32 and assigns it to the FeeReference field.
func (o *TransactionP2P) SetFeeReference(v int32) {
	o.FeeReference = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransactionP2P) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransactionP2P) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TransactionP2P) SetId(v int64) {
	o.Id = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TransactionP2P) GetMethod() int32 {
	if o == nil || o.Method == nil {
		var ret int32
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetMethodOk() (*int32, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TransactionP2P) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given int32 and assigns it to the Method field.
func (o *TransactionP2P) SetMethod(v int32) {
	o.Method = &v
}

// GetMethodDetails returns the MethodDetails field value if set, zero value otherwise.
func (o *TransactionP2P) GetMethodDetails() int32 {
	if o == nil || o.MethodDetails == nil {
		var ret int32
		return ret
	}
	return *o.MethodDetails
}

// GetMethodDetailsOk returns a tuple with the MethodDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetMethodDetailsOk() (*int32, bool) {
	if o == nil || o.MethodDetails == nil {
		return nil, false
	}
	return o.MethodDetails, true
}

// HasMethodDetails returns a boolean if a field has been set.
func (o *TransactionP2P) HasMethodDetails() bool {
	if o != nil && o.MethodDetails != nil {
		return true
	}

	return false
}

// SetMethodDetails gets a reference to the given int32 and assigns it to the MethodDetails field.
func (o *TransactionP2P) SetMethodDetails(v int32) {
	o.MethodDetails = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TransactionP2P) GetDate() int32 {
	if o == nil || o.Date == nil {
		var ret int32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetDateOk() (*int32, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TransactionP2P) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given int32 and assigns it to the Date field.
func (o *TransactionP2P) SetDate(v int32) {
	o.Date = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *TransactionP2P) GetCommissionAmount() int32 {
	if o == nil || o.CommissionAmount == nil {
		var ret int32
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetCommissionAmountOk() (*int32, bool) {
	if o == nil || o.CommissionAmount == nil {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *TransactionP2P) HasCommissionAmount() bool {
	if o != nil && o.CommissionAmount != nil {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given int32 and assigns it to the CommissionAmount field.
func (o *TransactionP2P) SetCommissionAmount(v int32) {
	o.CommissionAmount = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *TransactionP2P) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *TransactionP2P) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *TransactionP2P) SetComment(v string) {
	o.Comment = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionP2P) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionP2P) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *TransactionP2P) SetStatus(v int32) {
	o.Status = &v
}

// GetExecutionDate returns the ExecutionDate field value if set, zero value otherwise.
func (o *TransactionP2P) GetExecutionDate() int32 {
	if o == nil || o.ExecutionDate == nil {
		var ret int32
		return ret
	}
	return *o.ExecutionDate
}

// GetExecutionDateOk returns a tuple with the ExecutionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetExecutionDateOk() (*int32, bool) {
	if o == nil || o.ExecutionDate == nil {
		return nil, false
	}
	return o.ExecutionDate, true
}

// HasExecutionDate returns a boolean if a field has been set.
func (o *TransactionP2P) HasExecutionDate() bool {
	if o != nil && o.ExecutionDate != nil {
		return true
	}

	return false
}

// SetExecutionDate gets a reference to the given int32 and assigns it to the ExecutionDate field.
func (o *TransactionP2P) SetExecutionDate(v int32) {
	o.ExecutionDate = &v
}

// GetLemonWayCommission returns the LemonWayCommission field value if set, zero value otherwise.
func (o *TransactionP2P) GetLemonWayCommission() LemonWayCommission {
	if o == nil || o.LemonWayCommission == nil {
		var ret LemonWayCommission
		return ret
	}
	return *o.LemonWayCommission
}

// GetLemonWayCommissionOk returns a tuple with the LemonWayCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetLemonWayCommissionOk() (*LemonWayCommission, bool) {
	if o == nil || o.LemonWayCommission == nil {
		return nil, false
	}
	return o.LemonWayCommission, true
}

// HasLemonWayCommission returns a boolean if a field has been set.
func (o *TransactionP2P) HasLemonWayCommission() bool {
	if o != nil && o.LemonWayCommission != nil {
		return true
	}

	return false
}

// SetLemonWayCommission gets a reference to the given LemonWayCommission and assigns it to the LemonWayCommission field.
func (o *TransactionP2P) SetLemonWayCommission(v LemonWayCommission) {
	o.LemonWayCommission = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *TransactionP2P) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionP2P) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *TransactionP2P) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *TransactionP2P) SetReference(v string) {
	o.Reference = &v
}

func (o TransactionP2P) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SenderAccountId != nil {
		toSerialize["senderAccountId"] = o.SenderAccountId
	}
	if o.ReceiverAccountId != nil {
		toSerialize["receiverAccountId"] = o.ReceiverAccountId
	}
	if o.DebitAmount != nil {
		toSerialize["debitAmount"] = o.DebitAmount
	}
	if o.CreditAmount != nil {
		toSerialize["creditAmount"] = o.CreditAmount
	}
	if o.PrivateData != nil {
		toSerialize["privateData"] = o.PrivateData
	}
	if o.ScheduledDate != nil {
		toSerialize["scheduledDate"] = o.ScheduledDate
	}
	if o.IsFee != nil {
		toSerialize["isFee"] = o.IsFee
	}
	if o.FeeReference != nil {
		toSerialize["feeReference"] = o.FeeReference
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.MethodDetails != nil {
		toSerialize["methodDetails"] = o.MethodDetails
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.CommissionAmount != nil {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ExecutionDate != nil {
		toSerialize["executionDate"] = o.ExecutionDate
	}
	if o.LemonWayCommission != nil {
		toSerialize["lemonWayCommission"] = o.LemonWayCommission
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionP2P struct {
	value *TransactionP2P
	isSet bool
}

func (v NullableTransactionP2P) Get() *TransactionP2P {
	return v.value
}

func (v *NullableTransactionP2P) Set(val *TransactionP2P) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionP2P) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionP2P) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionP2P(val *TransactionP2P) *NullableTransactionP2P {
	return &NullableTransactionP2P{value: val, isSet: true}
}

func (v NullableTransactionP2P) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionP2P) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


