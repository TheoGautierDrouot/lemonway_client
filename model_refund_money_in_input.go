/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RefundMoneyInInput struct for RefundMoneyInInput
type RefundMoneyInInput struct {
	// Refund Amount. If empty, the total amount of the payment will be refunded.
	AmountToRefund *int32 `json:"amountToRefund,omitempty"`
	// Comment on the refund.   **Explain the reason for the refunded amount**   **Note:** In the API Response displayed before the comment will appear the refund transaction id. Example: comment\": \"Refund 2763789 Items not wanted\"
	Comment *string `json:"comment,omitempty"`
}

// NewRefundMoneyInInput instantiates a new RefundMoneyInInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundMoneyInInput() *RefundMoneyInInput {
	this := RefundMoneyInInput{}
	return &this
}

// NewRefundMoneyInInputWithDefaults instantiates a new RefundMoneyInInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundMoneyInInputWithDefaults() *RefundMoneyInInput {
	this := RefundMoneyInInput{}
	return &this
}

// GetAmountToRefund returns the AmountToRefund field value if set, zero value otherwise.
func (o *RefundMoneyInInput) GetAmountToRefund() int32 {
	if o == nil || o.AmountToRefund == nil {
		var ret int32
		return ret
	}
	return *o.AmountToRefund
}

// GetAmountToRefundOk returns a tuple with the AmountToRefund field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundMoneyInInput) GetAmountToRefundOk() (*int32, bool) {
	if o == nil || o.AmountToRefund == nil {
		return nil, false
	}
	return o.AmountToRefund, true
}

// HasAmountToRefund returns a boolean if a field has been set.
func (o *RefundMoneyInInput) HasAmountToRefund() bool {
	if o != nil && o.AmountToRefund != nil {
		return true
	}

	return false
}

// SetAmountToRefund gets a reference to the given int32 and assigns it to the AmountToRefund field.
func (o *RefundMoneyInInput) SetAmountToRefund(v int32) {
	o.AmountToRefund = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *RefundMoneyInInput) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundMoneyInInput) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *RefundMoneyInInput) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *RefundMoneyInInput) SetComment(v string) {
	o.Comment = &v
}

func (o RefundMoneyInInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AmountToRefund != nil {
		toSerialize["amountToRefund"] = o.AmountToRefund
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableRefundMoneyInInput struct {
	value *RefundMoneyInInput
	isSet bool
}

func (v NullableRefundMoneyInInput) Get() *RefundMoneyInInput {
	return v.value
}

func (v *NullableRefundMoneyInInput) Set(val *RefundMoneyInInput) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundMoneyInInput) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundMoneyInInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundMoneyInInput(val *RefundMoneyInInput) *NullableRefundMoneyInInput {
	return &NullableRefundMoneyInInput{value: val, isSet: true}
}

func (v NullableRefundMoneyInInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundMoneyInInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


