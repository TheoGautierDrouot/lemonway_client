/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MoneyInChequeInitInput struct for MoneyInChequeInitInput
type MoneyInChequeInitInput struct {
	// Leave Empty
	TransferId *string `json:"transferId,omitempty"`
	// Leave empty
	Partner *string `json:"partner,omitempty"`
	// Cheque payment (by default) or Pagaré:<br/>15 = Cheque payment.<br/>23 = Pagaré.<br/>
	ChequeType *int32 `json:"chequeType,omitempty"`
	// The seven-digit number at the bottom left-hand corner of the cheque.
	ChequeNumber *string `json:"ChequeNumber,omitempty"`
	// Zone Interbancaire (ZIB). The twelve-digit number used to identify the cheque holder’s bank.
	BankIdentifier *string `json:"BankIdentifier,omitempty"`
	// Zone Interne (ZIN). The twelve-digit number used to identify the cheque holder’s account.
	InternalIdentifier *string `json:"InternalIdentifier,omitempty"`
	// La Clé de Recomposition de la Ligne Magnétique du Chèque. These 2 numbers help identify a potential counterfeit cheque. (only France)
	RLMC *int32 `json:"RLMC,omitempty"`
	// Fichier National des Chèques Irréguliers de la Banque de France. This FNCI check allows to make a verification on the cheque information. (only France) Please contact our support for this feature.
	CheckFnci *bool `json:"CheckFnci,omitempty"`
	// Unique ID of the call, generated by your server. This ID can be used as a search field when looking for operation details
	Reference *string `json:"reference,omitempty"`
	// Payment Account ID to Credit
	AccountId string `json:"accountId"`
	// Amount to Debit  Amounts are given as integer numbers in cents
	TotalAmount *int32 `json:"totalAmount,omitempty"`
	// Your Fee  Amounts are given as integer numbers in cents
	CommissionAmount *int32 `json:"commissionAmount,omitempty"`
	// Comment Regarding the Transaction
	Comment *string `json:"comment,omitempty"`
	// If true:  1. [amountCom] will be ignored and will be replaced with Lemonway's fee    2. You will not receive any fee
	AutoCommission *bool `json:"autoCommission,omitempty"`
}

// NewMoneyInChequeInitInput instantiates a new MoneyInChequeInitInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoneyInChequeInitInput(accountId string) *MoneyInChequeInitInput {
	this := MoneyInChequeInitInput{}
	this.AccountId = accountId
	return &this
}

// NewMoneyInChequeInitInputWithDefaults instantiates a new MoneyInChequeInitInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoneyInChequeInitInputWithDefaults() *MoneyInChequeInitInput {
	this := MoneyInChequeInitInput{}
	return &this
}

// GetTransferId returns the TransferId field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetTransferId() string {
	if o == nil || o.TransferId == nil {
		var ret string
		return ret
	}
	return *o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetTransferIdOk() (*string, bool) {
	if o == nil || o.TransferId == nil {
		return nil, false
	}
	return o.TransferId, true
}

// HasTransferId returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasTransferId() bool {
	if o != nil && o.TransferId != nil {
		return true
	}

	return false
}

// SetTransferId gets a reference to the given string and assigns it to the TransferId field.
func (o *MoneyInChequeInitInput) SetTransferId(v string) {
	o.TransferId = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetPartner() string {
	if o == nil || o.Partner == nil {
		var ret string
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetPartnerOk() (*string, bool) {
	if o == nil || o.Partner == nil {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasPartner() bool {
	if o != nil && o.Partner != nil {
		return true
	}

	return false
}

// SetPartner gets a reference to the given string and assigns it to the Partner field.
func (o *MoneyInChequeInitInput) SetPartner(v string) {
	o.Partner = &v
}

// GetChequeType returns the ChequeType field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetChequeType() int32 {
	if o == nil || o.ChequeType == nil {
		var ret int32
		return ret
	}
	return *o.ChequeType
}

// GetChequeTypeOk returns a tuple with the ChequeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetChequeTypeOk() (*int32, bool) {
	if o == nil || o.ChequeType == nil {
		return nil, false
	}
	return o.ChequeType, true
}

// HasChequeType returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasChequeType() bool {
	if o != nil && o.ChequeType != nil {
		return true
	}

	return false
}

// SetChequeType gets a reference to the given int32 and assigns it to the ChequeType field.
func (o *MoneyInChequeInitInput) SetChequeType(v int32) {
	o.ChequeType = &v
}

// GetChequeNumber returns the ChequeNumber field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetChequeNumber() string {
	if o == nil || o.ChequeNumber == nil {
		var ret string
		return ret
	}
	return *o.ChequeNumber
}

// GetChequeNumberOk returns a tuple with the ChequeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetChequeNumberOk() (*string, bool) {
	if o == nil || o.ChequeNumber == nil {
		return nil, false
	}
	return o.ChequeNumber, true
}

// HasChequeNumber returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasChequeNumber() bool {
	if o != nil && o.ChequeNumber != nil {
		return true
	}

	return false
}

// SetChequeNumber gets a reference to the given string and assigns it to the ChequeNumber field.
func (o *MoneyInChequeInitInput) SetChequeNumber(v string) {
	o.ChequeNumber = &v
}

// GetBankIdentifier returns the BankIdentifier field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetBankIdentifier() string {
	if o == nil || o.BankIdentifier == nil {
		var ret string
		return ret
	}
	return *o.BankIdentifier
}

// GetBankIdentifierOk returns a tuple with the BankIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetBankIdentifierOk() (*string, bool) {
	if o == nil || o.BankIdentifier == nil {
		return nil, false
	}
	return o.BankIdentifier, true
}

// HasBankIdentifier returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasBankIdentifier() bool {
	if o != nil && o.BankIdentifier != nil {
		return true
	}

	return false
}

// SetBankIdentifier gets a reference to the given string and assigns it to the BankIdentifier field.
func (o *MoneyInChequeInitInput) SetBankIdentifier(v string) {
	o.BankIdentifier = &v
}

// GetInternalIdentifier returns the InternalIdentifier field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetInternalIdentifier() string {
	if o == nil || o.InternalIdentifier == nil {
		var ret string
		return ret
	}
	return *o.InternalIdentifier
}

// GetInternalIdentifierOk returns a tuple with the InternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetInternalIdentifierOk() (*string, bool) {
	if o == nil || o.InternalIdentifier == nil {
		return nil, false
	}
	return o.InternalIdentifier, true
}

// HasInternalIdentifier returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasInternalIdentifier() bool {
	if o != nil && o.InternalIdentifier != nil {
		return true
	}

	return false
}

// SetInternalIdentifier gets a reference to the given string and assigns it to the InternalIdentifier field.
func (o *MoneyInChequeInitInput) SetInternalIdentifier(v string) {
	o.InternalIdentifier = &v
}

// GetRLMC returns the RLMC field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetRLMC() int32 {
	if o == nil || o.RLMC == nil {
		var ret int32
		return ret
	}
	return *o.RLMC
}

// GetRLMCOk returns a tuple with the RLMC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetRLMCOk() (*int32, bool) {
	if o == nil || o.RLMC == nil {
		return nil, false
	}
	return o.RLMC, true
}

// HasRLMC returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasRLMC() bool {
	if o != nil && o.RLMC != nil {
		return true
	}

	return false
}

// SetRLMC gets a reference to the given int32 and assigns it to the RLMC field.
func (o *MoneyInChequeInitInput) SetRLMC(v int32) {
	o.RLMC = &v
}

// GetCheckFnci returns the CheckFnci field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetCheckFnci() bool {
	if o == nil || o.CheckFnci == nil {
		var ret bool
		return ret
	}
	return *o.CheckFnci
}

// GetCheckFnciOk returns a tuple with the CheckFnci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetCheckFnciOk() (*bool, bool) {
	if o == nil || o.CheckFnci == nil {
		return nil, false
	}
	return o.CheckFnci, true
}

// HasCheckFnci returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasCheckFnci() bool {
	if o != nil && o.CheckFnci != nil {
		return true
	}

	return false
}

// SetCheckFnci gets a reference to the given bool and assigns it to the CheckFnci field.
func (o *MoneyInChequeInitInput) SetCheckFnci(v bool) {
	o.CheckFnci = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *MoneyInChequeInitInput) SetReference(v string) {
	o.Reference = &v
}

// GetAccountId returns the AccountId field value
func (o *MoneyInChequeInitInput) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *MoneyInChequeInitInput) SetAccountId(v string) {
	o.AccountId = v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetTotalAmount() int32 {
	if o == nil || o.TotalAmount == nil {
		var ret int32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetTotalAmountOk() (*int32, bool) {
	if o == nil || o.TotalAmount == nil {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasTotalAmount() bool {
	if o != nil && o.TotalAmount != nil {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given int32 and assigns it to the TotalAmount field.
func (o *MoneyInChequeInitInput) SetTotalAmount(v int32) {
	o.TotalAmount = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetCommissionAmount() int32 {
	if o == nil || o.CommissionAmount == nil {
		var ret int32
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetCommissionAmountOk() (*int32, bool) {
	if o == nil || o.CommissionAmount == nil {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasCommissionAmount() bool {
	if o != nil && o.CommissionAmount != nil {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given int32 and assigns it to the CommissionAmount field.
func (o *MoneyInChequeInitInput) SetCommissionAmount(v int32) {
	o.CommissionAmount = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MoneyInChequeInitInput) SetComment(v string) {
	o.Comment = &v
}

// GetAutoCommission returns the AutoCommission field value if set, zero value otherwise.
func (o *MoneyInChequeInitInput) GetAutoCommission() bool {
	if o == nil || o.AutoCommission == nil {
		var ret bool
		return ret
	}
	return *o.AutoCommission
}

// GetAutoCommissionOk returns a tuple with the AutoCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInChequeInitInput) GetAutoCommissionOk() (*bool, bool) {
	if o == nil || o.AutoCommission == nil {
		return nil, false
	}
	return o.AutoCommission, true
}

// HasAutoCommission returns a boolean if a field has been set.
func (o *MoneyInChequeInitInput) HasAutoCommission() bool {
	if o != nil && o.AutoCommission != nil {
		return true
	}

	return false
}

// SetAutoCommission gets a reference to the given bool and assigns it to the AutoCommission field.
func (o *MoneyInChequeInitInput) SetAutoCommission(v bool) {
	o.AutoCommission = &v
}

func (o MoneyInChequeInitInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransferId != nil {
		toSerialize["transferId"] = o.TransferId
	}
	if o.Partner != nil {
		toSerialize["partner"] = o.Partner
	}
	if o.ChequeType != nil {
		toSerialize["chequeType"] = o.ChequeType
	}
	if o.ChequeNumber != nil {
		toSerialize["ChequeNumber"] = o.ChequeNumber
	}
	if o.BankIdentifier != nil {
		toSerialize["BankIdentifier"] = o.BankIdentifier
	}
	if o.InternalIdentifier != nil {
		toSerialize["InternalIdentifier"] = o.InternalIdentifier
	}
	if o.RLMC != nil {
		toSerialize["RLMC"] = o.RLMC
	}
	if o.CheckFnci != nil {
		toSerialize["CheckFnci"] = o.CheckFnci
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if o.TotalAmount != nil {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if o.CommissionAmount != nil {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.AutoCommission != nil {
		toSerialize["autoCommission"] = o.AutoCommission
	}
	return json.Marshal(toSerialize)
}

type NullableMoneyInChequeInitInput struct {
	value *MoneyInChequeInitInput
	isSet bool
}

func (v NullableMoneyInChequeInitInput) Get() *MoneyInChequeInitInput {
	return v.value
}

func (v *NullableMoneyInChequeInitInput) Set(val *MoneyInChequeInitInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMoneyInChequeInitInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMoneyInChequeInitInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoneyInChequeInitInput(val *MoneyInChequeInitInput) *NullableMoneyInChequeInitInput {
	return &NullableMoneyInChequeInitInput{value: val, isSet: true}
}

func (v NullableMoneyInChequeInitInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoneyInChequeInitInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


