/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MoneyInWebInitInput struct for MoneyInWebInitInput
type MoneyInWebInitInput struct {
	// Your site URL called by WebKit to terminate the operation.
	ReturnUrl string `json:"returnUrl"`
	// Your site return URL, called by WebKit in case of an error.
	ErrorUrl string `json:"errorUrl"`
	// Your site return URL, called by WebKit in case of a cancellation.
	CancelUrl string `json:"cancelUrl"`
	// Save the card and returns an ID for future payments.
	RegisterCard *bool `json:"registerCard,omitempty"`
	// Indicate the number of days of the deferred payment. Between 0 and 6 days to have a guaranteed payment.   Only usable with isPreAuth = 0-6
	CaptureDelayedDays *int32 `json:"captureDelayedDays,omitempty"`
	// Indicates the name of the shop on the payment page.
	Label *string `json:"label,omitempty"`
	// Indicates the CardId
	CardId *string `json:"cardId,omitempty"`
	// Indicates the nature of activity for this Money-In:<br/>0 = Activity 1.<br/>1 = Activity 2.<br/>
	MoneyInNature *int32 `json:"moneyInNature,omitempty"`
	ThreeDs *ThreeDs `json:"threeDS,omitempty"`
	RiskAnalysis *RiskAnalysis `json:"riskAnalysis,omitempty"`
	// Average amount of future recurring payments to cover recurring payments with variable amounts.    **Note:** Only if the amount is higher than the amount of the first transaction.
	RecurringAvgAmount *int32 `json:"recurringAvgAmount,omitempty"`
	// **Recurring**: If a payment follows a recurring amount or **One_shot**: when there is no future recurring payments.
	PaymentPattern *string `json:"paymentPattern,omitempty"`
	// Unique ID of the call, generated by your server. This ID can be used as a search field when looking for operation details
	Reference *string `json:"reference,omitempty"`
	// Payment Account ID to Credit
	AccountId string `json:"accountId"`
	// Amount to Debit  Amounts are given as integer numbers in cents
	TotalAmount *int32 `json:"totalAmount,omitempty"`
	// Your Fee  Amounts are given as integer numbers in cents
	CommissionAmount *int32 `json:"commissionAmount,omitempty"`
	// Comment Regarding the Transaction
	Comment *string `json:"comment,omitempty"`
	// If true:  1. [amountCom] will be ignored and will be replaced with Lemonway's fee    2. You will not receive any fee
	AutoCommission *bool `json:"autoCommission,omitempty"`
}

// NewMoneyInWebInitInput instantiates a new MoneyInWebInitInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoneyInWebInitInput(returnUrl string, errorUrl string, cancelUrl string, accountId string) *MoneyInWebInitInput {
	this := MoneyInWebInitInput{}
	this.ReturnUrl = returnUrl
	this.ErrorUrl = errorUrl
	this.CancelUrl = cancelUrl
	this.AccountId = accountId
	return &this
}

// NewMoneyInWebInitInputWithDefaults instantiates a new MoneyInWebInitInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoneyInWebInitInputWithDefaults() *MoneyInWebInitInput {
	this := MoneyInWebInitInput{}
	return &this
}

// GetReturnUrl returns the ReturnUrl field value
func (o *MoneyInWebInitInput) GetReturnUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReturnUrl
}

// GetReturnUrlOk returns a tuple with the ReturnUrl field value
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetReturnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReturnUrl, true
}

// SetReturnUrl sets field value
func (o *MoneyInWebInitInput) SetReturnUrl(v string) {
	o.ReturnUrl = v
}

// GetErrorUrl returns the ErrorUrl field value
func (o *MoneyInWebInitInput) GetErrorUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorUrl
}

// GetErrorUrlOk returns a tuple with the ErrorUrl field value
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetErrorUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorUrl, true
}

// SetErrorUrl sets field value
func (o *MoneyInWebInitInput) SetErrorUrl(v string) {
	o.ErrorUrl = v
}

// GetCancelUrl returns the CancelUrl field value
func (o *MoneyInWebInitInput) GetCancelUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CancelUrl
}

// GetCancelUrlOk returns a tuple with the CancelUrl field value
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetCancelUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CancelUrl, true
}

// SetCancelUrl sets field value
func (o *MoneyInWebInitInput) SetCancelUrl(v string) {
	o.CancelUrl = v
}

// GetRegisterCard returns the RegisterCard field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetRegisterCard() bool {
	if o == nil || o.RegisterCard == nil {
		var ret bool
		return ret
	}
	return *o.RegisterCard
}

// GetRegisterCardOk returns a tuple with the RegisterCard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetRegisterCardOk() (*bool, bool) {
	if o == nil || o.RegisterCard == nil {
		return nil, false
	}
	return o.RegisterCard, true
}

// HasRegisterCard returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasRegisterCard() bool {
	if o != nil && o.RegisterCard != nil {
		return true
	}

	return false
}

// SetRegisterCard gets a reference to the given bool and assigns it to the RegisterCard field.
func (o *MoneyInWebInitInput) SetRegisterCard(v bool) {
	o.RegisterCard = &v
}

// GetCaptureDelayedDays returns the CaptureDelayedDays field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetCaptureDelayedDays() int32 {
	if o == nil || o.CaptureDelayedDays == nil {
		var ret int32
		return ret
	}
	return *o.CaptureDelayedDays
}

// GetCaptureDelayedDaysOk returns a tuple with the CaptureDelayedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetCaptureDelayedDaysOk() (*int32, bool) {
	if o == nil || o.CaptureDelayedDays == nil {
		return nil, false
	}
	return o.CaptureDelayedDays, true
}

// HasCaptureDelayedDays returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasCaptureDelayedDays() bool {
	if o != nil && o.CaptureDelayedDays != nil {
		return true
	}

	return false
}

// SetCaptureDelayedDays gets a reference to the given int32 and assigns it to the CaptureDelayedDays field.
func (o *MoneyInWebInitInput) SetCaptureDelayedDays(v int32) {
	o.CaptureDelayedDays = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *MoneyInWebInitInput) SetLabel(v string) {
	o.Label = &v
}

// GetCardId returns the CardId field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetCardId() string {
	if o == nil || o.CardId == nil {
		var ret string
		return ret
	}
	return *o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetCardIdOk() (*string, bool) {
	if o == nil || o.CardId == nil {
		return nil, false
	}
	return o.CardId, true
}

// HasCardId returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasCardId() bool {
	if o != nil && o.CardId != nil {
		return true
	}

	return false
}

// SetCardId gets a reference to the given string and assigns it to the CardId field.
func (o *MoneyInWebInitInput) SetCardId(v string) {
	o.CardId = &v
}

// GetMoneyInNature returns the MoneyInNature field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetMoneyInNature() int32 {
	if o == nil || o.MoneyInNature == nil {
		var ret int32
		return ret
	}
	return *o.MoneyInNature
}

// GetMoneyInNatureOk returns a tuple with the MoneyInNature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetMoneyInNatureOk() (*int32, bool) {
	if o == nil || o.MoneyInNature == nil {
		return nil, false
	}
	return o.MoneyInNature, true
}

// HasMoneyInNature returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasMoneyInNature() bool {
	if o != nil && o.MoneyInNature != nil {
		return true
	}

	return false
}

// SetMoneyInNature gets a reference to the given int32 and assigns it to the MoneyInNature field.
func (o *MoneyInWebInitInput) SetMoneyInNature(v int32) {
	o.MoneyInNature = &v
}

// GetThreeDS returns the ThreeDs field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetThreeDS() ThreeDs {
	if o == nil || o.ThreeDs == nil {
		var ret ThreeDs
		return ret
	}
	return *o.ThreeDs
}

// GetThreeDSOk returns a tuple with the ThreeDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetThreeDSOk() (*ThreeDs, bool) {
	if o == nil || o.ThreeDs == nil {
		return nil, false
	}
	return o.ThreeDs, true
}

// HasThreeDS returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasThreeDS() bool {
	if o != nil && o.ThreeDs != nil {
		return true
	}

	return false
}

// SetThreeDS gets a reference to the given ThreeDs and assigns it to the ThreeDs field.
func (o *MoneyInWebInitInput) SetThreeDS(v ThreeDs) {
	o.ThreeDs = &v
}

// GetRiskAnalysis returns the RiskAnalysis field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetRiskAnalysis() RiskAnalysis {
	if o == nil || o.RiskAnalysis == nil {
		var ret RiskAnalysis
		return ret
	}
	return *o.RiskAnalysis
}

// GetRiskAnalysisOk returns a tuple with the RiskAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetRiskAnalysisOk() (*RiskAnalysis, bool) {
	if o == nil || o.RiskAnalysis == nil {
		return nil, false
	}
	return o.RiskAnalysis, true
}

// HasRiskAnalysis returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasRiskAnalysis() bool {
	if o != nil && o.RiskAnalysis != nil {
		return true
	}

	return false
}

// SetRiskAnalysis gets a reference to the given RiskAnalysis and assigns it to the RiskAnalysis field.
func (o *MoneyInWebInitInput) SetRiskAnalysis(v RiskAnalysis) {
	o.RiskAnalysis = &v
}

// GetRecurringAvgAmount returns the RecurringAvgAmount field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetRecurringAvgAmount() int32 {
	if o == nil || o.RecurringAvgAmount == nil {
		var ret int32
		return ret
	}
	return *o.RecurringAvgAmount
}

// GetRecurringAvgAmountOk returns a tuple with the RecurringAvgAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetRecurringAvgAmountOk() (*int32, bool) {
	if o == nil || o.RecurringAvgAmount == nil {
		return nil, false
	}
	return o.RecurringAvgAmount, true
}

// HasRecurringAvgAmount returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasRecurringAvgAmount() bool {
	if o != nil && o.RecurringAvgAmount != nil {
		return true
	}

	return false
}

// SetRecurringAvgAmount gets a reference to the given int32 and assigns it to the RecurringAvgAmount field.
func (o *MoneyInWebInitInput) SetRecurringAvgAmount(v int32) {
	o.RecurringAvgAmount = &v
}

// GetPaymentPattern returns the PaymentPattern field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetPaymentPattern() string {
	if o == nil || o.PaymentPattern == nil {
		var ret string
		return ret
	}
	return *o.PaymentPattern
}

// GetPaymentPatternOk returns a tuple with the PaymentPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetPaymentPatternOk() (*string, bool) {
	if o == nil || o.PaymentPattern == nil {
		return nil, false
	}
	return o.PaymentPattern, true
}

// HasPaymentPattern returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasPaymentPattern() bool {
	if o != nil && o.PaymentPattern != nil {
		return true
	}

	return false
}

// SetPaymentPattern gets a reference to the given string and assigns it to the PaymentPattern field.
func (o *MoneyInWebInitInput) SetPaymentPattern(v string) {
	o.PaymentPattern = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetReference() string {
	if o == nil || o.Reference == nil {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetReferenceOk() (*string, bool) {
	if o == nil || o.Reference == nil {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasReference() bool {
	if o != nil && o.Reference != nil {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *MoneyInWebInitInput) SetReference(v string) {
	o.Reference = &v
}

// GetAccountId returns the AccountId field value
func (o *MoneyInWebInitInput) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *MoneyInWebInitInput) SetAccountId(v string) {
	o.AccountId = v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetTotalAmount() int32 {
	if o == nil || o.TotalAmount == nil {
		var ret int32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetTotalAmountOk() (*int32, bool) {
	if o == nil || o.TotalAmount == nil {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasTotalAmount() bool {
	if o != nil && o.TotalAmount != nil {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given int32 and assigns it to the TotalAmount field.
func (o *MoneyInWebInitInput) SetTotalAmount(v int32) {
	o.TotalAmount = &v
}

// GetCommissionAmount returns the CommissionAmount field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetCommissionAmount() int32 {
	if o == nil || o.CommissionAmount == nil {
		var ret int32
		return ret
	}
	return *o.CommissionAmount
}

// GetCommissionAmountOk returns a tuple with the CommissionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetCommissionAmountOk() (*int32, bool) {
	if o == nil || o.CommissionAmount == nil {
		return nil, false
	}
	return o.CommissionAmount, true
}

// HasCommissionAmount returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasCommissionAmount() bool {
	if o != nil && o.CommissionAmount != nil {
		return true
	}

	return false
}

// SetCommissionAmount gets a reference to the given int32 and assigns it to the CommissionAmount field.
func (o *MoneyInWebInitInput) SetCommissionAmount(v int32) {
	o.CommissionAmount = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetComment() string {
	if o == nil || o.Comment == nil {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetCommentOk() (*string, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *MoneyInWebInitInput) SetComment(v string) {
	o.Comment = &v
}

// GetAutoCommission returns the AutoCommission field value if set, zero value otherwise.
func (o *MoneyInWebInitInput) GetAutoCommission() bool {
	if o == nil || o.AutoCommission == nil {
		var ret bool
		return ret
	}
	return *o.AutoCommission
}

// GetAutoCommissionOk returns a tuple with the AutoCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoneyInWebInitInput) GetAutoCommissionOk() (*bool, bool) {
	if o == nil || o.AutoCommission == nil {
		return nil, false
	}
	return o.AutoCommission, true
}

// HasAutoCommission returns a boolean if a field has been set.
func (o *MoneyInWebInitInput) HasAutoCommission() bool {
	if o != nil && o.AutoCommission != nil {
		return true
	}

	return false
}

// SetAutoCommission gets a reference to the given bool and assigns it to the AutoCommission field.
func (o *MoneyInWebInitInput) SetAutoCommission(v bool) {
	o.AutoCommission = &v
}

func (o MoneyInWebInitInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["returnUrl"] = o.ReturnUrl
	}
	if true {
		toSerialize["errorUrl"] = o.ErrorUrl
	}
	if true {
		toSerialize["cancelUrl"] = o.CancelUrl
	}
	if o.RegisterCard != nil {
		toSerialize["registerCard"] = o.RegisterCard
	}
	if o.CaptureDelayedDays != nil {
		toSerialize["captureDelayedDays"] = o.CaptureDelayedDays
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.CardId != nil {
		toSerialize["cardId"] = o.CardId
	}
	if o.MoneyInNature != nil {
		toSerialize["moneyInNature"] = o.MoneyInNature
	}
	if o.ThreeDs != nil {
		toSerialize["threeDS"] = o.ThreeDs
	}
	if o.RiskAnalysis != nil {
		toSerialize["riskAnalysis"] = o.RiskAnalysis
	}
	if o.RecurringAvgAmount != nil {
		toSerialize["recurringAvgAmount"] = o.RecurringAvgAmount
	}
	if o.PaymentPattern != nil {
		toSerialize["paymentPattern"] = o.PaymentPattern
	}
	if o.Reference != nil {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["accountId"] = o.AccountId
	}
	if o.TotalAmount != nil {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	if o.CommissionAmount != nil {
		toSerialize["commissionAmount"] = o.CommissionAmount
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.AutoCommission != nil {
		toSerialize["autoCommission"] = o.AutoCommission
	}
	return json.Marshal(toSerialize)
}

type NullableMoneyInWebInitInput struct {
	value *MoneyInWebInitInput
	isSet bool
}

func (v NullableMoneyInWebInitInput) Get() *MoneyInWebInitInput {
	return v.value
}

func (v *NullableMoneyInWebInitInput) Set(val *MoneyInWebInitInput) {
	v.value = val
	v.isSet = true
}

func (v NullableMoneyInWebInitInput) IsSet() bool {
	return v.isSet
}

func (v *NullableMoneyInWebInitInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoneyInWebInitInput(val *MoneyInWebInitInput) *NullableMoneyInWebInitInput {
	return &NullableMoneyInWebInitInput{value: val, isSet: true}
}

func (v NullableMoneyInWebInitInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoneyInWebInitInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


