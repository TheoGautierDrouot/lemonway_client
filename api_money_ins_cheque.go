/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// MoneyInsChequeApiService MoneyInsChequeApi service
type MoneyInsChequeApiService service

type ApiMoneyInsChequeGetRequest struct {
	ctx context.Context
	ApiService *MoneyInsChequeApiService
	authorization *string
	pSUIPAddress *string
	updateDate *string
	updateEndDate *string
	chequeType *int32
	reference *string
	page *int32
	limit *int32
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsChequeGetRequest) Authorization(authorization string) ApiMoneyInsChequeGetRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsChequeGetRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsChequeGetRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

func (r ApiMoneyInsChequeGetRequest) UpdateDate(updateDate string) ApiMoneyInsChequeGetRequest {
	r.updateDate = &updateDate
	return r
}

// End Date UTC Unix Timestamp
func (r ApiMoneyInsChequeGetRequest) UpdateEndDate(updateEndDate string) ApiMoneyInsChequeGetRequest {
	r.updateEndDate = &updateEndDate
	return r
}

// Cheque Payment (by default) or Pagaré:  15 &#x3D; Cheque payment.&lt;br/&gt;23 &#x3D; Pagaré.
func (r ApiMoneyInsChequeGetRequest) ChequeType(chequeType int32) ApiMoneyInsChequeGetRequest {
	r.chequeType = &chequeType
	return r
}

// Unique ID generated by your server
func (r ApiMoneyInsChequeGetRequest) Reference(reference string) ApiMoneyInsChequeGetRequest {
	r.reference = &reference
	return r
}

// Index start from 1, let null to get all
func (r ApiMoneyInsChequeGetRequest) Page(page int32) ApiMoneyInsChequeGetRequest {
	r.page = &page
	return r
}

// Default 20, let it null if no pagination
func (r ApiMoneyInsChequeGetRequest) Limit(limit int32) ApiMoneyInsChequeGetRequest {
	r.limit = &limit
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsChequeGetRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsChequeGetRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsChequeGetRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsChequeGetRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsChequeGetRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsChequeGetRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsChequeGetRequest) AuthorizationBasicFromProvider() ApiMoneyInsChequeGetRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsChequeGetRequest) AuthorizationBearerFromProvider() ApiMoneyInsChequeGetRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsChequeGetRequest) Execute() (*GetMoneyInChequeDetailsOutput, *http.Response, error) {
	return r.ApiService.MoneyInsChequeGetExecute(r)
}

/*
MoneyInsChequeGet Search for Cheque Money-In by Date or by Token

Use GET /moneyins/cheque to obtain the list of all money-in by cheque (received by Lemonway), starting from an entry date given in input to this method, or by merchant token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMoneyInsChequeGetRequest
*/
func (a *MoneyInsChequeApiService) MoneyInsChequeGet(ctx context.Context) ApiMoneyInsChequeGetRequest {
	return ApiMoneyInsChequeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetMoneyInChequeDetailsOutput
func (a *MoneyInsChequeApiService) MoneyInsChequeGetExecute(r ApiMoneyInsChequeGetRequest) (*GetMoneyInChequeDetailsOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMoneyInChequeDetailsOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsChequeApiService.MoneyInsChequeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/cheque"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}

	if r.updateDate != nil {
		localVarQueryParams.Add("updateDate", parameterToString(*r.updateDate, ""))
	}
	if r.updateEndDate != nil {
		localVarQueryParams.Add("updateEndDate", parameterToString(*r.updateEndDate, ""))
	}
	if r.chequeType != nil {
		localVarQueryParams.Add("chequeType", parameterToString(*r.chequeType, ""))
	}
	if r.reference != nil {
		localVarQueryParams.Add("reference", parameterToString(*r.reference, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMoneyInsChequeInitPostRequest struct {
	ctx context.Context
	ApiService *MoneyInsChequeApiService
	authorization *string
	pSUIPAddress *string
	parameters *MoneyInChequeInitInput
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsChequeInitPostRequest) Authorization(authorization string) ApiMoneyInsChequeInitPostRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsChequeInitPostRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsChequeInitPostRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

func (r ApiMoneyInsChequeInitPostRequest) Parameters(parameters MoneyInChequeInitInput) ApiMoneyInsChequeInitPostRequest {
	r.parameters = &parameters
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsChequeInitPostRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsChequeInitPostRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsChequeInitPostRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsChequeInitPostRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsChequeInitPostRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsChequeInitPostRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsChequeInitPostRequest) AuthorizationBasicFromProvider() ApiMoneyInsChequeInitPostRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsChequeInitPostRequest) AuthorizationBearerFromProvider() ApiMoneyInsChequeInitPostRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsChequeInitPostRequest) Execute() (*MoneyInChequeInitOutput, *http.Response, error) {
	return r.ApiService.MoneyInsChequeInitPostExecute(r)
}

/*
MoneyInsChequeInitPost Register a Cheque

The following rules apply:
If you want to pre-enter the cheques in our system, use the POST /moneyins/cheque/init method<br />
The cheque must be made out to Lemonway<br />
On the back of the cheque, please enter a code to facilitate reconciliation. It will be of the following form: XXXXX-YYYYYYYYYY <br /><ul><li>"XXXXX: code identifying you as indicated in your production configuration form </li><li>-: a separation dash:</li><li>YYYYYYYYY : external identifier of your user's payment account </li></ul>
The holder of the cheque must be identical to that of the payment account to be credited <br />

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMoneyInsChequeInitPostRequest
*/
func (a *MoneyInsChequeApiService) MoneyInsChequeInitPost(ctx context.Context) ApiMoneyInsChequeInitPostRequest {
	return ApiMoneyInsChequeInitPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MoneyInChequeInitOutput
func (a *MoneyInsChequeApiService) MoneyInsChequeInitPostExecute(r ApiMoneyInsChequeInitPostRequest) (*MoneyInChequeInitOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MoneyInChequeInitOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsChequeApiService.MoneyInsChequeInitPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/cheque/init"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}
	if r.parameters == nil {
        value, ok := localAdditionalValues["parameters"].(MoneyInChequeInitInput)
        if !ok {
            return localVarReturnValue, nil, reportError("parameters is required and must be specified")
        }
        r.parameters = &value
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	// body params
	localVarPostBody = r.parameters
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
