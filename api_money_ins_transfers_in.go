/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// MoneyInsTransfersInApiService MoneyInsTransfersInApi service
type MoneyInsTransfersInApiService service

type ApiMoneyInsBankwireGetRequest struct {
	ctx context.Context
	ApiService *MoneyInsTransfersInApiService
	updateDate *string
	updateEndDate *string
	authorization *string
	pSUIPAddress *string
	page *int32
	limit *int32
	pSUAcceptLanguage *string
	pSUUserAgent *string
}

// UTC Unix Timestamp
func (r ApiMoneyInsBankwireGetRequest) UpdateDate(updateDate string) ApiMoneyInsBankwireGetRequest {
	r.updateDate = &updateDate
	return r
}

// End Date tUTC Unix Timestamp
func (r ApiMoneyInsBankwireGetRequest) UpdateEndDate(updateEndDate string) ApiMoneyInsBankwireGetRequest {
	r.updateEndDate = &updateEndDate
	return r
}

// Authorization bearer (OAuth 2)
func (r ApiMoneyInsBankwireGetRequest) Authorization(authorization string) ApiMoneyInsBankwireGetRequest {
	r.authorization = &authorization
	return r
}

// IP address of the final client (PSU).
func (r ApiMoneyInsBankwireGetRequest) PSUIPAddress(pSUIPAddress string) ApiMoneyInsBankwireGetRequest {
	r.pSUIPAddress = &pSUIPAddress
	return r
}

// Index start from 1, let null to get all
func (r ApiMoneyInsBankwireGetRequest) Page(page int32) ApiMoneyInsBankwireGetRequest {
	r.page = &page
	return r
}

// Default 20, let it null if no pagination
func (r ApiMoneyInsBankwireGetRequest) Limit(limit int32) ApiMoneyInsBankwireGetRequest {
	r.limit = &limit
	return r
}

// Response language accepted by final client (PSU). English by default
func (r ApiMoneyInsBankwireGetRequest) PSUAcceptLanguage(pSUAcceptLanguage string) ApiMoneyInsBankwireGetRequest {
	r.pSUAcceptLanguage = &pSUAcceptLanguage
	return r
}

// User-agent of the final client (PSU).
func (r ApiMoneyInsBankwireGetRequest) PSUUserAgent(pSUUserAgent string) ApiMoneyInsBankwireGetRequest {
	r.pSUUserAgent = &pSUUserAgent
	return r
}


// Use Authorization from given provider. Overrides usage of manually set Authorization header.
// Auth type describes authorization type to use, like "Bearer" or "Basic"
func (r ApiMoneyInsBankwireGetRequest) AuthorizationFromProvider(authType AuthType) ApiMoneyInsBankwireGetRequest {
    r.ctx = context.WithValue(r.ctx, authorizationFromProviderCtxKey, authType)
    return r
}

// Use Basic Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsBankwireGetRequest) AuthorizationBasicFromProvider() ApiMoneyInsBankwireGetRequest {
    return r.AuthorizationFromProvider(AuthTypeBasic)
}

// Use Bearer Authorization from given provider. Overrides usage of manually set Authorization header.
func (r ApiMoneyInsBankwireGetRequest) AuthorizationBearerFromProvider() ApiMoneyInsBankwireGetRequest {
    return r.AuthorizationFromProvider(AuthTypeBearer)
}

func (r ApiMoneyInsBankwireGetRequest) Execute() (*GetMoneyInIBANDetailsOutput, *http.Response, error) {
	return r.ApiService.MoneyInsBankwireGetExecute(r)
}

/*
MoneyInsBankwireGet Search for a Money-In by Fund Transfer

Use `GetMoneyInIBANStatus` to obtain the list of all Money-In by fund transfer (not by card payment) received by Lemonway, starting from an entry date given in input to this method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMoneyInsBankwireGetRequest
*/
func (a *MoneyInsTransfersInApiService) MoneyInsBankwireGet(ctx context.Context) ApiMoneyInsBankwireGetRequest {
	return ApiMoneyInsBankwireGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GetMoneyInIBANDetailsOutput
func (a *MoneyInsTransfersInApiService) MoneyInsBankwireGetExecute(r ApiMoneyInsBankwireGetRequest) (*GetMoneyInIBANDetailsOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMoneyInIBANDetailsOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoneyInsTransfersInApiService.MoneyInsBankwireGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/moneyins/bankwire"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
    localAdditionalValues := make(map[string]interface{})

    if r.ctx != nil {
        if authProviderAuthType, ok := r.ctx.Value(authorizationFromProviderCtxKey).(AuthType); ok && authProviderAuthType != "" {
            token, err := a.client.authProvider.GetToken()
            if err != nil {
                return localVarReturnValue, nil, &GenericOpenAPIError{
                    body: nil,
                    error: err.Error(),
                    model: localAdditionalValues,
                }
            }
            localAdditionalValues["authorization"] = string(authProviderAuthType)+" "+token
        }
    }
	if r.updateDate == nil {
        value, ok := localAdditionalValues["updateDate"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("updateDate is required and must be specified")
        }
        r.updateDate = &value
	}
	if r.updateEndDate == nil {
        value, ok := localAdditionalValues["updateEndDate"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("updateEndDate is required and must be specified")
        }
        r.updateEndDate = &value
	}
	if r.authorization == nil {
        value, ok := localAdditionalValues["authorization"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("authorization is required and must be specified")
        }
        r.authorization = &value
	}
	if r.pSUIPAddress == nil {
        value, ok := localAdditionalValues["pSUIPAddress"].(string)
        if !ok {
            return localVarReturnValue, nil, reportError("pSUIPAddress is required and must be specified")
        }
        r.pSUIPAddress = &value
	}

	localVarQueryParams.Add("updateDate", parameterToString(*r.updateDate, ""))
	localVarQueryParams.Add("updateEndDate", parameterToString(*r.updateEndDate, ""))
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["Authorization"] = parameterToString(*r.authorization, "")
	if r.pSUAcceptLanguage != nil {
		localVarHeaderParams["PSU-Accept-Language"] = parameterToString(*r.pSUAcceptLanguage, "")
	}
	localVarHeaderParams["PSU-IP-Address"] = parameterToString(*r.pSUIPAddress, "")
	if r.pSUUserAgent != nil {
		localVarHeaderParams["PSU-User-Agent"] = parameterToString(*r.pSUUserAgent, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
