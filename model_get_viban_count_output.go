/*
Lemonway DirectKit API 2.0

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetVibanCountOutput struct for GetVibanCountOutput
type GetVibanCountOutput struct {
	ActiveVibanCount *int32 `json:"activeVibanCount,omitempty"`
	InactiveVibanCount *int32 `json:"inactiveVibanCount,omitempty"`
	RemainingVibanCount *int32 `json:"remainingVibanCount,omitempty"`
	MaxVibanThreshold *int32 `json:"maxVibanThreshold,omitempty"`
	MaxVibanPerWalletThreshold *int32 `json:"maxVibanPerWalletThreshold,omitempty"`
	Error *Error `json:"error,omitempty"`
}

// NewGetVibanCountOutput instantiates a new GetVibanCountOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVibanCountOutput() *GetVibanCountOutput {
	this := GetVibanCountOutput{}
	return &this
}

// NewGetVibanCountOutputWithDefaults instantiates a new GetVibanCountOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVibanCountOutputWithDefaults() *GetVibanCountOutput {
	this := GetVibanCountOutput{}
	return &this
}

// GetActiveVibanCount returns the ActiveVibanCount field value if set, zero value otherwise.
func (o *GetVibanCountOutput) GetActiveVibanCount() int32 {
	if o == nil || o.ActiveVibanCount == nil {
		var ret int32
		return ret
	}
	return *o.ActiveVibanCount
}

// GetActiveVibanCountOk returns a tuple with the ActiveVibanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVibanCountOutput) GetActiveVibanCountOk() (*int32, bool) {
	if o == nil || o.ActiveVibanCount == nil {
		return nil, false
	}
	return o.ActiveVibanCount, true
}

// HasActiveVibanCount returns a boolean if a field has been set.
func (o *GetVibanCountOutput) HasActiveVibanCount() bool {
	if o != nil && o.ActiveVibanCount != nil {
		return true
	}

	return false
}

// SetActiveVibanCount gets a reference to the given int32 and assigns it to the ActiveVibanCount field.
func (o *GetVibanCountOutput) SetActiveVibanCount(v int32) {
	o.ActiveVibanCount = &v
}

// GetInactiveVibanCount returns the InactiveVibanCount field value if set, zero value otherwise.
func (o *GetVibanCountOutput) GetInactiveVibanCount() int32 {
	if o == nil || o.InactiveVibanCount == nil {
		var ret int32
		return ret
	}
	return *o.InactiveVibanCount
}

// GetInactiveVibanCountOk returns a tuple with the InactiveVibanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVibanCountOutput) GetInactiveVibanCountOk() (*int32, bool) {
	if o == nil || o.InactiveVibanCount == nil {
		return nil, false
	}
	return o.InactiveVibanCount, true
}

// HasInactiveVibanCount returns a boolean if a field has been set.
func (o *GetVibanCountOutput) HasInactiveVibanCount() bool {
	if o != nil && o.InactiveVibanCount != nil {
		return true
	}

	return false
}

// SetInactiveVibanCount gets a reference to the given int32 and assigns it to the InactiveVibanCount field.
func (o *GetVibanCountOutput) SetInactiveVibanCount(v int32) {
	o.InactiveVibanCount = &v
}

// GetRemainingVibanCount returns the RemainingVibanCount field value if set, zero value otherwise.
func (o *GetVibanCountOutput) GetRemainingVibanCount() int32 {
	if o == nil || o.RemainingVibanCount == nil {
		var ret int32
		return ret
	}
	return *o.RemainingVibanCount
}

// GetRemainingVibanCountOk returns a tuple with the RemainingVibanCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVibanCountOutput) GetRemainingVibanCountOk() (*int32, bool) {
	if o == nil || o.RemainingVibanCount == nil {
		return nil, false
	}
	return o.RemainingVibanCount, true
}

// HasRemainingVibanCount returns a boolean if a field has been set.
func (o *GetVibanCountOutput) HasRemainingVibanCount() bool {
	if o != nil && o.RemainingVibanCount != nil {
		return true
	}

	return false
}

// SetRemainingVibanCount gets a reference to the given int32 and assigns it to the RemainingVibanCount field.
func (o *GetVibanCountOutput) SetRemainingVibanCount(v int32) {
	o.RemainingVibanCount = &v
}

// GetMaxVibanThreshold returns the MaxVibanThreshold field value if set, zero value otherwise.
func (o *GetVibanCountOutput) GetMaxVibanThreshold() int32 {
	if o == nil || o.MaxVibanThreshold == nil {
		var ret int32
		return ret
	}
	return *o.MaxVibanThreshold
}

// GetMaxVibanThresholdOk returns a tuple with the MaxVibanThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVibanCountOutput) GetMaxVibanThresholdOk() (*int32, bool) {
	if o == nil || o.MaxVibanThreshold == nil {
		return nil, false
	}
	return o.MaxVibanThreshold, true
}

// HasMaxVibanThreshold returns a boolean if a field has been set.
func (o *GetVibanCountOutput) HasMaxVibanThreshold() bool {
	if o != nil && o.MaxVibanThreshold != nil {
		return true
	}

	return false
}

// SetMaxVibanThreshold gets a reference to the given int32 and assigns it to the MaxVibanThreshold field.
func (o *GetVibanCountOutput) SetMaxVibanThreshold(v int32) {
	o.MaxVibanThreshold = &v
}

// GetMaxVibanPerWalletThreshold returns the MaxVibanPerWalletThreshold field value if set, zero value otherwise.
func (o *GetVibanCountOutput) GetMaxVibanPerWalletThreshold() int32 {
	if o == nil || o.MaxVibanPerWalletThreshold == nil {
		var ret int32
		return ret
	}
	return *o.MaxVibanPerWalletThreshold
}

// GetMaxVibanPerWalletThresholdOk returns a tuple with the MaxVibanPerWalletThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVibanCountOutput) GetMaxVibanPerWalletThresholdOk() (*int32, bool) {
	if o == nil || o.MaxVibanPerWalletThreshold == nil {
		return nil, false
	}
	return o.MaxVibanPerWalletThreshold, true
}

// HasMaxVibanPerWalletThreshold returns a boolean if a field has been set.
func (o *GetVibanCountOutput) HasMaxVibanPerWalletThreshold() bool {
	if o != nil && o.MaxVibanPerWalletThreshold != nil {
		return true
	}

	return false
}

// SetMaxVibanPerWalletThreshold gets a reference to the given int32 and assigns it to the MaxVibanPerWalletThreshold field.
func (o *GetVibanCountOutput) SetMaxVibanPerWalletThreshold(v int32) {
	o.MaxVibanPerWalletThreshold = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *GetVibanCountOutput) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVibanCountOutput) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *GetVibanCountOutput) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *GetVibanCountOutput) SetError(v Error) {
	o.Error = &v
}

func (o GetVibanCountOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveVibanCount != nil {
		toSerialize["activeVibanCount"] = o.ActiveVibanCount
	}
	if o.InactiveVibanCount != nil {
		toSerialize["inactiveVibanCount"] = o.InactiveVibanCount
	}
	if o.RemainingVibanCount != nil {
		toSerialize["remainingVibanCount"] = o.RemainingVibanCount
	}
	if o.MaxVibanThreshold != nil {
		toSerialize["maxVibanThreshold"] = o.MaxVibanThreshold
	}
	if o.MaxVibanPerWalletThreshold != nil {
		toSerialize["maxVibanPerWalletThreshold"] = o.MaxVibanPerWalletThreshold
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableGetVibanCountOutput struct {
	value *GetVibanCountOutput
	isSet bool
}

func (v NullableGetVibanCountOutput) Get() *GetVibanCountOutput {
	return v.value
}

func (v *NullableGetVibanCountOutput) Set(val *GetVibanCountOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVibanCountOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVibanCountOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVibanCountOutput(val *GetVibanCountOutput) *NullableGetVibanCountOutput {
	return &NullableGetVibanCountOutput{value: val, isSet: true}
}

func (v NullableGetVibanCountOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVibanCountOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


